/* Задайте значения M и N. Напишите рекурсивный метод, который выведет все натуральные числа кратные 3-ём в промежутке от M до N.
Пример:
M = 1; N = 9. -> "3, 6, 9" M = 13; N = 20. -> "15, 18"
*/

using static System.Console; 
 
Clear(); 
 
int M = AskNumber("M"); 
int N = AskNumber("N"); 
WriteLine($"M = {M}; N = {N}. -> \"{PrintRange(M, N)}\""); 
 
static string PrintRange(int M, int N) // лучше назвать метод "получить числа, кратные трем", типа PrintMultiplesOfThree 
{ 
    if (N < M) return string.Empty; // странно, почему уменьшаем верхний предел диапазона,  
    // а не приращаем нижний, ведь в задаче сказано "от M до N", например от 3 до 9 -> 3, 4, 5, 6, 7, 8, 9 
    // ну а с кратностью будет -> 3, 6, 9 Ну да Бог с ним, подстраиваюсь под твое решение, свое представлю ниже  
    // if (M % 3 == 0) раз уж ты перебираешь N, тогда надо его и проверять на четность, перепишем: 
    if (N % 3 == 0) 
    { 
        string part = (N - M) < 3 ? $"{N}" : $"{N}, "; // оригинальная обрезка последней запятой с пробелом))  
        // С точки зрения нагрузки на память - крайне плохое решение. Немного перепишем дааный тернарный опепратор,  
        // что бы обрезку сделать после последнего миниимально кратного (для положительных и отрицательных) 
        return part + PrintRange(M, N - 3); // Если "поймали" число кратное трем, что бы избежать дальнейших "впустую" 
        //  переборов сразу переходим к следующему кратному, экономим память 
    } 
    return PrintRange(M, N - 1); // ищем первое попавшееся кратное  
} 
 
static int AskNumber(string name) 
{ 
    Write($"Введите число {name}: "); 
    return int.Parse(ReadLine()); 
}